apply plugin: 'com.android.library'
apply plugin: 'kotlin-allopen'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion app.compileSdk

    defaultConfig {
        minSdkVersion app.minSdk
        targetSdkVersion app.targetSdk
        versionCode app.versionCode
        versionName app.versionName
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility app.sourceCompat
        targetCompatibility app.targetCompat
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    dataBinding {
        enabled true
    }
}

allOpen {
    // Makes annotated classes `open` in debug builds, used for mocking in unit tests.
    annotation 'com.spiraclesoftware.core.testing.OpenClass'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    debugApi "com.squareup.leakcanary:leakcanary-android:${versions.leakCanary}"
    releaseApi "com.squareup.leakcanary:leakcanary-android-no-op:${versions.leakCanary}"
    debugApi "com.squareup.leakcanary:leakcanary-support-fragment:${versions.leakCanary}"

    api "com.google.dagger:dagger-android:${versions.dagger}"
    api "com.google.dagger:dagger-android-support:${versions.dagger}"
    kapt "com.google.dagger:dagger-compiler:${versions.dagger}"
    kapt "com.google.dagger:dagger-android-processor:${versions.dagger}"

    api "com.squareup.okhttp3:okhttp:${versions.okhttp}"
    api "com.squareup.okhttp3:logging-interceptor:${versions.okhttp}"

    api "com.squareup.retrofit2:retrofit:${versions.retrofit}"
    api "com.squareup.retrofit2:converter-gson:${versions.retrofit}"

    api "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${versions.kotlin}"

    api "androidx.appcompat:appcompat:${versions.androidx}"
    api "androidx.recyclerview:recyclerview:${versions.androidx}"

    api "androidx.lifecycle:lifecycle-extensions:${versions.lifecycleComp}"

    api "com.google.android.material:material:${versions.androidx}"
}
